# Directory containing .xml files to be analized.
xml_dir: ../../Corpus_Test/xml

# Directory containing .mscx files to be analyzed if harmonic analysis is required.
musescore_dir: ../../Corpus_Test/musescore

# Directory to keep .pkl files if caching is enabled. null for disabling cache.
cache_dir: null

# Boolean flag to expand repetitions of the music score or not.
expand_repeats: false

# Size of windows (in number of measures) when extracting features of the score in a.
# Each row of the resulting DataFrame will correspond to each window.
# If null, only one window is extracted, with the  size of the whole score.
# A `WindowId` column is always added, containing the number of the window in the score
# to which a row of the dataframe refers to.
# Note that the standard `Id` column referred to the MusicXML files is always present.
window_size: null

# Size of overlap (in measures) beatween each window. Considered only if `window_size` is
# null
overlap: 2

# Number of parallel processes to be used as defined by joblib: 
# 1 => no parallel. 2 => 2 processes. -1 => all available virtual cores. -2 => all available virtual cores except 1
parallel: 1

# Directory to save the logs files, level for logging in the console (console_level) and
# inthe log file (file_level)
log:
  file_path: logs/musif_test.log
  file_level: INFO
  console_level: INFO

# Modules that are run once for every score. This distinction is important only when
# `window_size` > 1
# They are processed first and used by the other features so disabling them might result
# in errors when extracting features.
# Dependencies may be expressed in the `musif_dependencies` property of the feature, see
# for instance `musif.extract.features.density.__init__.py`
basic_modules:
  - scoring

# Modules to be extracting from scores. Order is important, so last ones will be
# processed last. Some of them might depends on others.
# For example, density model relies on the number of note, which is computed in core.
# Dependencies may be expressed in the `musif_dependencies` property of the feature, see
# for instance `musif.extract.features.density.__init__.py`
# To disable/enable a module, simply comment the line.
features:
  - core
  - ambitus
  - interval
  - tempo
  - density
  - texture
  - harmony
  - lyrics
  - scale
  - scale_relative
  - key
  - dynamics    
  - rhythm

# Filter to select only some instruments to be processed for each score. 
# If the filter is None (disabling all parts), the program will extract all parts.
parts_filter:
  # - vnI
  # - vnII
  # - obI
  # - obII
  # - va
  # - bs
  # - sop
  # - ten
  # - alt
  # - bar
  # - bass
  # - bbar

# Used to split the possible layers present depending on the instrument name
split_keywords:  
  - woodwind
  - brass
  - wind
  - viola
  - cello
  - bass
  - oboi
  

